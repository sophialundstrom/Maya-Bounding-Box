string $MyWindow = "BBox_Window";

if(window("-ex", $MyWindow))
{
    deleteUI $MyWindow;
}

window("-title", "Create BoundingBox", "-w", 200, "-h", 200, "BBox_Window");
columnLayout ("-adjustableColumn", true);

frameLayout("-collapsable", true, "-label", "Bounding Box Type");
columnLayout;

//SECTION ONE
$alignCheckbox = checkBox("-label", "Axis Align");
$boxType = radioButtonGrp("-numberOfRadioButtons", 2 , "-label", "Bounding Box Type", "-labelArray2", "Cube", "Sphere", "-sl", 1);

setParent..;
setParent..;

frameLayout("-collapsable", true, "-label", "Bounding Box Size");
columnLayout;

//SECTION TWO
$offsetSlider = floatSliderGrp("-label", "Offsett", "-field", on, "-minValue", -10.0, "-maxValue", 10.0 , "-fieldMinValue", -10.0, "-fieldMaxValue", 10.0);

setParent..;
setParent..;

frameLayout("-collapsable", true, "-label", "Bounding Box Shader");
columnLayout;

//SECTION THREE
$shaderCheckbox = checkBox("-label", "Create New Bounding Box Shader");
$colorSlider = colorSliderGrp("-label", "Pick Color", "color");
$transparencySlider = floatSliderGrp("-label", "Transparency", "-field", on, "-minValue", 0.0, "-maxValue", 1.0);

setParent..;
setParent..;

frameLayout("-collapsable", true, "-label", "Bounding Box Settings");
columnLayout;

//SECTION FOUR
$parentCheckbox = checkBox("-label", "Parent Bounding Box With Mesh");
$lockAttrCheckbox = checkBox("-label", "Lock Bounding Box Attributes");
$newLayerCheckbox = checkBox("-label", "Create Layer For Bounding Box");

setParent..;
setParent..;

$closeCmd = ("deleteUI " + $MyWindow);
frameLayout("-collapsable", false, "-label", " ");
rowLayout("-numberOfColumns", 3, "-columnWidth3", 150, 150, 150);

//SECTION FIVE
$Create = button("-label", "Create BBox", "-w", 100, "-command", "getValues($alignCheckbox, $boxType, $offsetSlider, $shaderCheckbox, $colorSlider, $transparencySlider, $parentCheckbox, $lockAttrCheckbox, $newLayerCheckbox)");
$Undo = button("-label", "Undo", "-w", 100, "-command", "undo");
$Exit = button("-label", "Exit", "-command", $closeCmd, "-w", 100);

setParent..;
setParent..;
showWindow;

proc getValues(string $axisBool, string $boxType, string $offsetAmount, string $shaderBool, string $colorSlider, string $transparencySlider, string $parentBool, string $locketAttrBool, string $layerBool)
{
    $axis = checkBox("-q", "-value", $axisBool);
    $type = radioButtonGrp("-q", "-sl", $boxType);
    $offset = floatSliderGrp("-q", "-value", $offsetAmount);
    $shader = checkBox("-q", "-value", $shaderBool);
    $color = colorSliderGrp("-q", "-rgb", $colorSlider);
    $transparency = floatSliderGrp("-q", "-value", $transparencySlider);
    $parent = checkBox("-q", "-value", $parentBool);
    $locked = checkBox("-q", "-value", $locketAttrBool);
    $layer = checkBox("-q", "-value", $layerBool);
    
    execute($axis, $type, $offset, $shader , $color, $transparency, $parent, $locked, $layer);
}

proc execute(int $axis, int $type, float $offset, int $shader, float $color[], float $transparency, int $parent, int $locked, int $layer)
{
    string $selected[] = ls("-sl");
    string $name;
    int $successful = 1;
    
    if (size($selected) == 0)
	{
		error("-n", "No item selected");
	}
	
	if (size($selected) > 1 && $layer == 1)
	{
	    error("-n", "Cant create layers for multiple objects");
	    $successful = 0;
	}
    
    if ($successful == 1)
    {
        for ($item in $selected)
    	{
    		$name = $item + "_boundingBox";
    
    		float $rot[] = getAttr($item + ".rotate");
    		float $trans[] = getAttr($item + ".translate");
    		float $center[] = getAttr($item + ".center");
    		
    		if ($axis == 0)
    		{
    			rotate(0,0,0, $item);
    		}
    		
    		if ($axis == 1)
    		{
    		    makeIdentity("-apply", true, "-t", 0, "-r", 1, "-s", 0, $item);
    		    CenterPivot();
    		    $center = getAttr($item + ".center");
    		}
    		
    		$BBox = getAttr($item + ".boundingBoxSize");
    		
    		float $boundingBox[] = exactWorldBoundingBox($item);
    				
    		float $width = $boundingBox[3] - $boundingBox[0];
    		float $height = $boundingBox[4] - $boundingBox[1];
    		float $depth = $boundingBox[5] - $boundingBox[2];
    		float $size[] = { $width, $height, $depth };
    		
    		if ($type == 1)
    		{
    			polyCube("-w", $width + $offset, "-h", $height + $offset, "-d", $depth + $offset, "-n", $name);
    		}
    		
    		else
    		{
    		    int $highestIndex = 0;
    		    
    		    for ($i = 1; $i < 3; ++$i)
    		    {
    		        if ($size[$i] > $size[$highestIndex])
    		        {
    		            $highestIndex = $i;
    		        }
    		    }
    		    
    			$rad = $size[$highestIndex] / 2;
    			polySphere("-r", $rad + $offset, "-n", $name);
    		}
    		
    		move("-r", $center[0], $center[1], $center[2], $name); 
    		
    		if ($axis == 0)
    		{
    		    setAttr($item + ".rotate", $rot[0], $rot[1], $rot[2]);
    			setAttr($name + ".rotate", $rot[0], $rot[1], $rot[2]);
    		}
    		
    		if ($shader == 1)
    		{
    			string $sh = shadingNode("-asShader", "blinn", "-n", $name + "Material");
    			select("-r", $name);
    			hyperShade("-a", $sh);
    			setAttr($sh + ".color", $color[0], $color[1] , $color[2]);
    			setAttr($sh + ".transparency", 1 - $transparency, 1 - $transparency, 1 - $transparency);
    		}
    		
    		if ($parent == 1)
    		{
    			parent($name, $item);
    		}
    		
    		if ($locked == 1)
    		{
    			setAttr("-l", on, $name + ".translate");
    			setAttr("-l", on, $name + ".rotate");
    			setAttr("-l", on, $name + ".scale");
    		}
    		
    		if ($layer == 1)
    		{
    			$num = size(ls("-type", "displayLayer")) + 1;
    			$layer = createDisplayLayer("-num", $num, "-n", $name + "Layer");
    			select($name);
    			layerEditorAddObjects($layer);
    		}
    	}
    }
};